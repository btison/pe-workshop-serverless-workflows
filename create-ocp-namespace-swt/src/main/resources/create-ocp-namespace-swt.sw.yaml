id: create-ocp-namespace-swt
version: '1.0'
specVersion: '0.8'
name: 'Create OpenShift Namespace'
description: 'Creating an OpenShift Namespace'
dataInputSchema: schemas/create-ocp-namespace-swt-schema.json
functions:
  - name: getProjectId
    operation: specs/gitlab-openapi.yaml#getApiV4Projects
  - name: createIssue
    operation: specs/gitlab-openapi.yaml#postApiV4ProjectsIdIssues
  - name: getIssue
    operation: specs/gitlab-openapi.yaml#getApiV4ProjectsIdIssuesIssueId
  - name: closeIssue
    operation: specs/gitlab-openapi.yaml#putApiV4ProjectsIdIssuesIssueId
  - name: createNotification
    operation: specs/notifications-openapi.yaml#createNotification
  - name: launchSoftwareTemplate
    operation: specs/scaffolder-openapi.yaml#createTask
  - name: getSoftwareTemplateTask
    operation: specs/scaffolder-openapi.yaml#getTaskDetails
  - name: logInfo
    type: custom
    operation: "sysout:INFO"
  - name: templateSuccessResult
    type: expression
    operation: '{
      "result": {
      "outputs":[
      {
      "key":"Component in Catalog",
      "value": $SECRET.rhdh_url + "/catalog/default/component/" + .component.repoName,
      "format":"link"
      }]
      }
      }'
  - name: templateErrorResult
    type: expression
    operation: '{
      "result": {
      "completedWith":"error",
      "message": "Launching software template failed.",
      "outputs":[]
      }
      }'
  - name: successResult
    type: expression
    operation: '{
        "result": {
          "message": "Namespace " + .namespace + " active",
          "outputs":[]
        }
      }'
  - name: errorNamespaceNotActiveResult
    type: expression
    operation: '{
        "result": {
          "message": "Namespace " + .namespace + " not active"
        }
      }'
  - name: errorDeniedResult
    type: expression
    operation: '{
        "result": {
          "message": "Creation of namespace " + .namespace + " denied",
          "outputs":[
            {
                "key":"Issue",
                "value": .createIssueResult.web_url,
                "format":"link"
            }]
          }
      }'
start: NamespaceSizeSwitch
states:
  - name: NamespaceSizeSwitch
    type: switch
    dataConditions:
      - name: Namespace small
        condition: .size == "small"
        transition:
          nextState: LaunchSoftwareTemplateSmall
      - name: Namespace large
        condition: .size == "large"
        transition:
          nextState: GetGitlabProjectId
    defaultCondition:
      transition:
        nextState: LaunchSoftwareTemplateSmall
    usedForCompensation: false
  - name: GetGitlabProjectId
    type: operation
    actions:
      - name: GetGitlabProjectId
        functionRef:
          refName: getProjectId
          arguments: 
            search: 'rhdh-issues'
            simple: true
        actionDataFilter:
          toStateData: .getProjectIdResult
    transition: CreateIssue
    end: false
  - name: CreateIssue
    type: operation
    actions:
      - name: CreateIssue
        functionRef: 
          refName: createIssue
          arguments:
            id: .getProjectIdResult[0].id|tostring
            title: '"Request for large namespace " + .namespace + " for user " + .requester'
            description: '.reason'
        actionDataFilter:
          toStateData: .createIssueResult
    transition: SendNotificationIssueCreated
  - name: SendNotificationIssueCreated
    type: operation
    actions:
      - name: "Create notification: issue created"
        functionRef:
          refName: createNotification
          arguments:
            recipients:
              type: "entity"
              entityRef: .recipients
            payload:
              title: '"Issue created: Request for large namespace " + .namespace+ " for user " + .requester'
              description: '"Issue created: Request for large namespace " + .namespace+ " for user " + .requester'
              topic: "Create OCP Namespace workflow"
              link: .createIssueResult.web_url
              severity: "normal"
    transition: PollIssue
  - name: PollIssue
    type: operation
    actions:
      - name: 'GetIssue'
        functionRef:
          refName: getIssue
          arguments:
            id: .getProjectIdResult[0].id|tostring
            issue_iid: .createIssueResult.iid
        actionDataFilter:
          toStateData: .getIssueResult
        sleep:
          before: PT60S
    transition: CheckIssueStatus
  - name: CheckIssueStatus
    type: switch
    dataConditions:
      - name: Resource request denied
        condition: (.getIssueResult.labels|length > 0) and (.getIssueResult.labels[0] == "denied")
        transition: SendNotificationRequestDenied
      - name: Resource request authorized
        condition: (.getIssueResult.labels|length > 0) and (.getIssueResult.labels[0] == "approved")
        transition: LaunchSoftwareTemplateLarge
    defaultCondition:
      transition: PollIssue
  - name: LaunchSoftwareTemplateLarge
    type: operation
    actions:
      - name: 'Launch Software Template'
        functionRef:
          refName: launchSoftwareTemplate
          arguments:
            templateRef: $SECRET.swt_ref_ns_large
            values:
              component_id: .namespace
              namespace_owner: .requester
        actionDataFilter:
          toStateData: .launchedTemplate
    transition: GetSoftwareTemplate
  - name: LaunchSoftwareTemplateSmall
    type: operation
    actions:
      - name: 'Launch Software Template'
        functionRef:
          refName: launchSoftwareTemplate
          arguments:
            templateRef: $SECRET.swt_ref_ns_small
            values:
              component_id: .namespace
              namespace_owner: .requester
        actionDataFilter:
          toStateData: .launchedTemplate
    transition: GetSoftwareTemplate
  - name: GetSoftwareTemplate
    type: operation
    actions:
      - functionRef:
          refName: logInfo
          arguments:
            message: '"Sleeping before checking the software template "'
        sleep:
          after: PT15S
      - functionRef:
          refName: getSoftwareTemplateTask
          arguments:
            taskId: .launchedTemplate.id
        actionDataFilter:
          toStateData: .readTask
    transition: IsTaskDone
  - name: IsTaskDone
    type: switch
    dataConditions:
      - condition: (.readTask.status == "processing")
        transition:
          nextState: GetSoftwareTemplate
      - condition: (.readTask.status == "completed")
        transition:
          nextState: SendTaskCompletedNotification
      - condition: (.readTask.status == "failed")
        transition:
          nextState: SendTaskFailureNotification
    defaultCondition:
      transition: GetSoftwareTemplate
  - name: SendTaskCompletedNotification
    type: operation
    actions:
      - functionRef:
          refName: templateSuccessResult
      - functionRef:
          refName: createNotification
          arguments:
            recipients:
              type: "entity"
              entityRef: .recipients
            payload:
              title: '"Namespace " + .namespace + " created"'
              description: '"Namespace " + .namespace + " created"'
              topic: "Create OCP Namespace workflow"
              link: '$SECRET.rhdh_url + "/catalog/default/component/" + .namespace'
              severity: "normal"
    transition: CloseIssueSwitch
  - name: SendTaskFailureNotification
    type: operation
    actions:
      - name: templateErrorResult
        functionRef:
          refName: templateErrorResult
      - functionRef:
          refName: createNotification
          arguments:
            recipients:
              type: "entity"
              entityRef: .recipients
            payload:
              title: '"Namespace " + ..namespace + " could not be created"'
              description: '"Namespace " + .namespace + " could not be created"'
              topic: "Create OCP Namespace workflow"
              severity: "high"
    transition: CloseIssueSwitch
  - name: CloseIssueSwitch
    type: switch
    dataConditions:
      - name: Namespace small
        condition: .size == "small"
        end: true
      - name: Namespace large
        condition: .size == "large"
        transition:
          nextState: CloseIssue
    defaultCondition:
      end: true
    usedForCompensation: false
  - name: CloseIssue
    type: operation
    actionMode: sequential
    actions:
      - name: CloseIssue
        actionDataFilter:
          toStateData: .closeIssueResult
        functionRef:
          refName: closeIssue
          arguments:
            id: .getProjectIdResult[0].id|tostring
            issue_iid: .createIssueResult.iid
            state_event: "close"
    end: true
  - name: SendNotificationRequestDenied
    type: operation
    actions:
      - name: "Create notification: request denied"
        functionRef:
          refName: createNotification
          arguments:
            recipients:
              type: "entity"
              entityRef: .recipients
            payload:
              title: '"Denied: Request for large namespace " + .namespace+ " for user " + .requester'
              description: '"Denied: Request for large namespace " + .namespace+ " for user " + .requester'
              topic: "Create OCP Namespace workflow"
              link: .createIssueResult.web_url
              severity: "normal"
    transition: CloseIssueDenied
  - name: CloseIssueDenied
    type: operation
    actionMode: sequential
    actions:
      - name: setOutput
        functionRef:
          refName: errorDeniedResult
      - name: CloseIssue
        actionDataFilter:
          toStateData: .closeIssueResult
        functionRef:
          refName: closeIssue
          arguments:
            id: .getProjectIdResult[0].id|tostring
            issue_iid: .createIssueResult.iid
            state_event: "close"
    end: true