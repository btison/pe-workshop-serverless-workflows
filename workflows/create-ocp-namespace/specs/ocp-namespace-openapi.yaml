openapi: 3.0.1
info:
  title: Kubernetes
  version: v1.29.7+4510e9c
servers:
  - url: /
security:
  - BearerToken: []
paths:
  /api/v1/namespaces:
    post:
      tags:
        - core_v1
      description: create a Namespace
      operationId: createCoreV1Namespace
      parameters:
        - name: pretty
          in: query
          description:
            "If 'true', then the output is pretty printed. Defaults to 'false'\
            \ unless the user-agent indicates a browser or command-line HTTP tool (curl\
            \ and wget)."
          schema:
            type: string
        - name: dryRun
          in: query
          description:
            "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error response\
            \ and no further processing of the request. Valid values are: - All: all\
            \ dry run stages will be processed"
          schema:
            type: string
        - name: fieldManager
          in: query
          description:
            "fieldManager is a name associated with the actor or entity that\
            \ is making these changes. The value must be less than or 128 characters\
            \ long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
          schema:
            type: string
        - name: fieldValidation
          in: query
          description:
            "fieldValidation instructs the server on how to handle objects\
            \ in the request (POST/PUT/PATCH) containing unknown or duplicate fields.\
            \ Valid values are: - Ignore: This will ignore any unknown fields that are\
            \ silently dropped from the object, and will ignore all but the last duplicate\
            \ field that the decoder encounters. This is the default behavior prior\
            \ to v1.23. - Warn: This will send a warning via the standard warning response\
            \ header for each unknown field that is dropped from the object, and for\
            \ each duplicate field that is encountered. The request will still succeed\
            \ if there are no other errors, and will only persist the last of any duplicate\
            \ fields. This is the default in v1.23+ - Strict: This will fail the request\
            \ with a BadRequest error if any unknown fields would be dropped from the\
            \ object, or if any duplicate fields are present. The error returned from\
            \ the server will contain all unknown and duplicate fields encountered."
          schema:
            type: string
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
        "401":
          description: Unauthorized
          content: {}
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ""
        kind: Namespace
        version: v1
      x-codegen-request-body-name: body
  /api/v1/namespaces/{name}:
    get:
      tags:
        - core_v1
      description: read the specified Namespace
      operationId: readCoreV1Namespace
      parameters:
        - name: name
          in: path
          description: name of the Namespace
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description:
            "If 'true', then the output is pretty printed. Defaults to 'false'\
            \ unless the user-agent indicates a browser or command-line HTTP tool (curl\
            \ and wget)."
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
        "401":
          description: Unauthorized
          content: {}
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ""
        kind: Namespace
        version: v1
components:
  schemas:
    io.k8s.api.core.v1.Namespace:
      type: object
      properties:
        apiVersion:
          type: string
          description:
            "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description:
            "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        spec:
          $ref: "#/components/schemas/io.k8s.api.core.v1.NamespaceSpec"
        status:
          $ref: "#/components/schemas/io.k8s.api.core.v1.NamespaceStatus"
      description:
        Namespace provides a scope for Names. Use of multiple namespaces
        is optional.
      x-kubernetes-group-version-kind:
        - group: ""
          kind: Namespace
          version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description:
            "Annotations is an unstructured key value map stored with a\
            \ resource that may be set by external tools to store and retrieve arbitrary\
            \ metadata. They are not queryable and should be preserved when modifying\
            \ objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations"
        creationTimestamp:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        deletionGracePeriodSeconds:
          type: integer
          description:
            Number of seconds allowed for this object to gracefully terminate
            before it will be removed from the system. Only set when deletionTimestamp
            is also set. May only be shortened. Read-only.
          format: int64
        deletionTimestamp:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        finalizers:
          type: array
          description:
            "Must be empty before the object is deleted from the registry.\
            \ Each entry is an identifier for the responsible component that will\
            \ remove the entry from the list. If the deletionTimestamp of the object\
            \ is non-nil, entries in this list can only be removed. Finalizers may\
            \ be processed and removed in any order.  Order is NOT enforced because\
            \ it introduces significant risk of stuck finalizers. finalizers is a\
            \ shared field, any actor with permission can reorder it. If the finalizer\
            \ list is processed in order, then this can lead to a situation in which\
            \ the component responsible for the first finalizer in the list is waiting\
            \ for a signal (field value, external system, or other) produced by a\
            \ component responsible for a finalizer later in the list, resulting in\
            \ a deadlock. Without enforced ordering finalizers are free to order amongst\
            \ themselves and are not vulnerable to ordering changes in the list."
          items:
            type: string
          x-kubernetes-patch-strategy: merge
        generateName:
          type: string
          description: |-
            GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

            If this field is specified and the generated name exists, the server will return a 409.

            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        generation:
          type: integer
          description:
            A sequence number representing a specific generation of the
            desired state. Populated by the system. Read-only.
          format: int64
        labels:
          type: object
          additionalProperties:
            type: string
          description:
            "Map of string keys and values that can be used to organize\
            \ and categorize (scope and select) objects. May match selectors of replication\
            \ controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels"
        managedFields:
          type: array
          description:
            "ManagedFields maps workflow-id and version to the set of fields\
            \ that are managed by that workflow. This is mostly for internal housekeeping,\
            \ and users typically shouldn't need to set or understand this field.\
            \ A workflow can be the user's name, a controller's name, or the name\
            \ of a specific apply path like \"ci-cd\". The set of fields is always\
            \ in the version that the workflow used when modifying the object."
          items:
            $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
        name:
          type: string
          description:
            "Name must be unique within a namespace. Is required when creating\
            \ resources, although some resources may allow a client to request the\
            \ generation of an appropriate name automatically. Name is primarily intended\
            \ for creation idempotence and configuration definition. Cannot be updated.\
            \ More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names"
        namespace:
          type: string
          description: |-
            Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

            Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
        ownerReferences:
          type: array
          description:
            "List of objects depended by this object. If ALL objects in\
            \ the list have been deleted, this object will be garbage collected. If\
            \ this object is managed by a controller, then an entry in this list will\
            \ point to this controller, with the controller field set to true. There\
            \ cannot be more than one managing controller."
          items:
            $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: uid
        resourceVersion:
          type: string
          description: |-
            An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

            Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        selfLink:
          type: string
          description:
            "Deprecated: selfLink is a legacy read-only field that is no\
            \ longer populated by the system."
        uid:
          type: string
          description: |-
            UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

            Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
      description:
        "ObjectMeta is metadata that all persisted resources must have,\
        \ which includes all objects users must create."
    io.k8s.apimachinery.pkg.apis.meta.v1.Time:
      type: string
      description:
        Time is a wrapper around time.Time which supports correct marshaling
        to YAML and JSON.  Wrappers are provided for many of the factory methods that
        the time package offers.
      format: date-time
    io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
      type: object
      properties:
        apiVersion:
          type: string
          description:
            APIVersion defines the version of this resource that this field
            set applies to. The format is "group/version" just like the top-level
            APIVersion field. It is necessary to track the version of a field set
            because it cannot be automatically converted.
        fieldsType:
          type: string
          description:
            "FieldsType is the discriminator for the different fields format\
            \ and version. There is currently only one possible value: \"FieldsV1\""
        fieldsV1:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
        manager:
          type: string
          description: Manager is an identifier of the workflow managing these fields.
        operation:
          type: string
          description:
            Operation is the type of operation which lead to this ManagedFieldsEntry
            being created. The only valid values for this field are 'Apply' and 'Update'.
        subresource:
          type: string
          description:
            "Subresource is the name of the subresource used to update\
            \ that object, or empty string if the object was updated through the main\
            \ resource. The value of this field is used to distinguish between managers,\
            \ even if they share the same name. For example, a status update will\
            \ be distinct from a regular update using the same manager name. Note\
            \ that the APIVersion field is not related to the Subresource field and\
            \ it always corresponds to the version of the main resource."
        time:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
      description:
        "ManagedFieldsEntry is a workflow-id, a FieldSet and the group\
        \ version of the resource that the fieldset applies to."
    io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
      required:
        - apiVersion
        - kind
        - name
        - uid
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the referent.
        blockOwnerDeletion:
          type: boolean
          description:
            "If true, AND if the owner has the \"foregroundDeletion\" finalizer,\
            \ then the owner cannot be deleted from the key-value store until this\
            \ reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\
            \ for how the garbage collector interacts with this field and enforces\
            \ the foreground deletion. Defaults to false. To set this field, a user\
            \ needs \"delete\" permission of the owner, otherwise 422 (Unprocessable\
            \ Entity) will be returned."
        controller:
          type: boolean
          description: "If true, this reference points to the managing controller."
        kind:
          type: string
          description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        name:
          type: string
          description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names"
        uid:
          type: string
          description: "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids"
      description:
        "OwnerReference contains enough information to let you identify\
        \ an owning object. An owning object must be in the same namespace as the\
        \ dependent, or be cluster-scoped, so there is no namespace field."
      x-kubernetes-map-type: atomic
    io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1:
      type: object
      description: |-
        FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

        Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

        The exact format is defined in sigs.k8s.io/structured-merge-diff
    io.k8s.api.core.v1.NamespaceSpec:
      type: object
      properties:
        finalizers:
          type: array
          description:
            "Finalizers is an opaque list of values that must be empty\
            \ to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
          items:
            type: string
      description: NamespaceSpec describes the attributes on a Namespace.
    io.k8s.api.core.v1.NamespaceStatus:
      type: object
      properties:
        conditions:
          type: array
          description:
            Represents the latest available observations of a namespace's
            current state.
          items:
            $ref: "#/components/schemas/io.k8s.api.core.v1.NamespaceCondition"
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        phase:
          type: string
          description: |-
            Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/

            Possible enum values:
             - `"Active"` means the namespace is available for use in the system
             - `"Terminating"` means the namespace is undergoing graceful termination
          enum:
            - Active
            - Terminating
      description: NamespaceStatus is information about the current status of a Namespace.
    io.k8s.api.core.v1.NamespaceCondition:
      required:
        - status
        - type
      type: object
      properties:
        lastTransitionTime:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        message:
          type: string
        reason:
          type: string
        status:
          type: string
          description: "Status of the condition, one of True, False, Unknown."
        type:
          type: string
          description: Type of namespace controller condition.
      description: NamespaceCondition contains details about state of namespace.
  parameters:
    pretty-tJGM1-ng:
      name: pretty
      in: query
      description:
        "If 'true', then the output is pretty printed. Defaults to 'false'\
        \ unless the user-agent indicates a browser or command-line HTTP tool (curl\
        \ and wget)."
      schema:
        type: string
    fieldManager-Qy4HdaTW:
      name: fieldManager
      in: query
      description:
        "fieldManager is a name associated with the actor or entity that\
        \ is making these changes. The value must be less than or 128 characters long,\
        \ and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
      schema:
        type: string
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      description: Bearer Token authentication
x-original-swagger-version: "2.0"
